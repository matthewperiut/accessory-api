plugins {
    id 'babric-loom' version '1.1-SNAPSHOT'
    id 'maven-publish'
    id 'java'
    id 'eclipse'
    id 'idea'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    gluedMinecraftJar()
    customMinecraftManifest.set("https://babric.github.io/manifest-polyfill/${minecraft_version}.json")
    intermediaryUrl.set("https://maven.glass-launcher.net/babric/babric/intermediary/%1\$s/intermediary-%1\$s-v2.jar")
}

sourceSets {
    test {
        compileClasspath += main.compileClasspath + main.output
        runtimeClasspath += main.runtimeClasspath + main.output
    }
}

repositories {
    maven {
        name = 'Froge'
        url = 'https://maven.minecraftforge.net/'
    }
    maven {
        name = 'Babric'
        url = 'https://maven.glass-launcher.net/babric'
    }
    maven {
        name = 'Glass Snapshots'
        url = 'https://maven.glass-launcher.net/snapshots'
    }
    maven {
        name = 'Glass Releases'
        url = 'https://maven.glass-launcher.net/releases'
    }
    maven {
        name = 'Jitpack'
        url = 'https://jitpack.io/'
    }
    mavenCentral()
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    jcenter() // for junit
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.glasslauncher:bin:${project.yarn_mappings}"
    modImplementation "babric:fabric-loader:${project.loader_version}"

    implementation "org.slf4j:slf4j-api:1.8.0-beta4"
    implementation "org.apache.logging.log4j:log4j-slf4j18-impl:2.17.2"

    // Add testing dependencies
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.mockito:mockito-core:3.11.2'

    modImplementation "net.modificationstation:StationAPI:${project.stapi_version}"

    // Optional, but convenient mods for mod creators and users alike.
    modImplementation("com.github.calmilamsy:ModMenu:${project.modmenu_version}") {
        transitive false
    }
    modImplementation("net.glasslauncher.mods:GlassConfigAPI:${project.gcapi_version}") {
        transitive false
    }

    implementation "blue.endless:jankson:${project.jankson_version}"
    modImplementation("net.glasslauncher:HowManyItems-Fabric-Unofficial:${project.howmanyitems_version}") {
        transitive false
    }

    modImplementation("com.github.matthewperiut:spc-babric:${project.spc_version}") {
        transitive false
    }
}

// add test tasks
test {
    useJUnit()
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

loom {
    runs {
        register("runTestmodClient") {
            source("test")
            //noinspection GroovyImplicitNullArgumentCall
            client()
        }
        register("runTestmodServer") {
            source("test")
            //noinspection GroovyImplicitNullArgumentCall
            server()
        }
    }
}

task testJar(type: Jar) {
    from sourceSets.test.output
    classifier 'test'
}